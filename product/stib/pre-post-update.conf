#! /bin/bash

updatedir="${UPDATEDIR}"
tmpdir="${TMPDIR}"
logdir="${LOGDIR}"

IPTFT_UPDATEDIR="/usr/share/update"
IPTFT_TMPDIR="$IPTFT_UPDATEDIR/tmp"
IPTFT_LOGDIR="$IPTFT_UPDATEDIR/log"
IPTFT_LOGFILE="$IPTFT_LOGDIR/update.log"
IPTFT_UPDATE_RESULT_FILE="$IPTFT_LOGDIR/update.result.flag"
IPTFT_UPDATE_RESULT_MSG="$IPTFT_LOGDIR/update.result.msg"
IPTFT_UPDATE_READY_FILE="$IPTFT_LOGDIR/update.ready.flag"
IPTFT_PRE_UPDATE_RESULT_FILE="$IPTFT_LOGDIR/pre.update.result.flag"
IPTFT_PRE_UPDATE_RESULT_MSG="$IPTFT_LOGDIR/pre.update.result.msg"
IPTFT_POST_UPDATE_RESULT_FILE="$IPTFT_LOGDIR/post.update.result.flag"
IPTFT_POST_UPDATE_RESULT_MSG="$IPTFT_LOGDIR/post.update.result.msg"


stib_app_exe="STIBApp"
stib_app_init="/etc/init.d/stib-init.sh"

EXIT_SUCCESS=0
EXIT_FAIL_UPDATE_CONF=192
EXIT_FAIL_HANOVER_CONF=193
EXIT_FAIL_OBCSAE_FTP_TRANSFER=194
EXIT_FAIL_PRE_POST_CONF=195
EXIT_FAIL_IPTFT_MD5_MISMATCH=199
EXIT_FAIL_IPTFT_FTP_DOWNLOAD=200
EXIT_FAIL_IPLED_MD5_MISMATCH=201
EXIT_FAIL_IPLED_FTP_DOWNLOAD=202
EXIT_FAIL_IPLED_DIR_NOT_FOUND=203
EXIT_FAIL_PRE_UPDATE_FLAG_NOT_FOUND=204
EXIT_FAIL_PRE_UPDATE_FAILED=205

IPTFT_LOGDIR="/usr/share/update/log"

obcsae_ip_addr="10.0.0.1"

# Number of maximum attempts to establish FTP/HTTP connection
MAX_ATTEMPT_COUNT=3

# IP-LEDs ip addresses
ipled_addr[0]="192.168.9.20"
ipled_addr[1]="192.168.9.21"
ipled_addr[2]="192.168.9.22"

ipled_front_id=0
ipled_side_id=1
ipled_rear_id=2

ftp_obc_dir="obc-iv"
ftp_ipk_dir="${ftp_obc_dir}/ipk"
ftp_data_dir="${ftp_obc_dir}/data"
ftp_logs_dir="${ftp_obc_dir}/logs"
ftp_iptft_dir="${ftp_ipk_dir}/ip_tft"
ftp_stib_dir="${ftp_ipk_dir}/stib"
ftp_ipled_dir="${ftp_ipk_dir}/ip_led"

#OBC-IV flags
ready_iptft_flag="ready_ip_tft"
updating_iptft_flag="updating_ip_tft"
updated_iptft_flag="updated_ip_tft"

ready_stib_flag="ready_stib"
updating_stib_flag="updating_stib"
updated_stib_flag="updated_stib"

ready_ipled_flag="ready_ip_led"
updating_ipled_flag="updating_ip_led"
updated_ipled_flag="updated_ip_led"


IP_ADDR[0]="192.168.9.10"
IP_ADDR[1]="192.168.9.11"
IP_ADDR[2]="192.168.9.12"
IP_ADDR[3]="192.168.9.13"

#FTP login
ftp_user="hd"
ftp_pswd="hd"

#Drop-bear RSA key
db_rsa_key="/home/root/.ssh/hanover.id_rsa.db"

exit_msg="EXIT: Success"


# This function takes one parameter - command to execute
# Run it with disabled output and return the result. 
#  
function execute ()
{
	#Redirect standard error stream to standard output
	2>&1
	
    $* >/dev/null
    return $?
}
export -f execute

# This function takes one parameter - command to execute
# Run it with disabled output and check the result. In case of fault it will
# leave that is denoted by capital L.
function executeL ()
{
	#Redirect standard error stream to standard output
	2>&1
	#Store command
	_cmd=$*
	
	#Execute the command
    $* >/dev/null
    
    #Store exit code 
	_exit_code=$?
	
    #Check the return result, if it fails exit
    if [ ${_exit_code} -ne 0 ]; then
    	echo "" | tee -a $LOGFILE
        exit_msg="ERROR: executing ${_cmd} returns ${_exit_code}"
		echo ${exit_msg} | tee -a $LOGFILE
        echo "" | tee -a $LOGFILE
        exit $EXIT_FAIL_EXECUTEL
    fi
}
export -f executeL

# This function takes two parameters:
# 1: number of attempts to execute
# 2: command to execute
# The command is ran with disabled output. The number attempts defined by first  
# parameter will be performed. It does not exit and just return the error code. 
function executeR ()
{
	_max=$1
	_cmd=$2
	_r=0
	
	#Redirect standard error stream to standard output
	2>&1

	for (( a=0; a<${_max} ; a++ )) ; do  	
    	${_cmd} > /dev/null
    	_r=$?
    	if [ ${_r} -eq "0" ] ; then
    		break;
    	fi
	done
	
   	return ${_r}
}
export -f executeR



# This function will download file from OBC-SAE to the current directory
# Parameters:
# param 1   - full path to the remote file
function ftp_download ()
{
  _fn=$1
  executeR $MAX_ATTEMPT_COUNT "curl -s -u ${ftp_user}:${ftp_pswd} -O ftp://${obcsae_ip_addr}/${_fn}" 
}
export -f ftp_download

# This functiion will upload the local source file to folder on OBC-SAE
# Parameters:
# param 1 - file name with the full path
# param 2 - destination path and optionally a new name on OBC-SAE
function ftp_upload ()
{
	_src=$1
	_dst=$2
	executeR $MAX_ATTEMPT_COUNT "curl -s -u ${ftp_user}:${ftp_pswd} -T ${_src} ftp://${obcsae_ip_addr}/${_dst}/"
}
export -f ftp_upload

# This function will delete a file on OBC-SAE
# Parameters:
# param 1 - file name with the full path on OBC-SAE
function ftp_delete () 
{
	_fn=$1
	for (( a=0; a < $MAX_ATTEMPT_COUNT; a++ )) ; do 
		curl -s -u "${ftp_user}:${ftp_pswd}" --quote "DELE ${_fn}" ftp://${obcsae_ip_addr} > /dev/null
		if [ $? -eq 0 ] ; then
			break;
		fi 
	done

	return $?	
}
export -f ftp_delete

# This function will download file from OBC-SAE to the current directory
# Parameters:
# param 1   - full path to the remote file
# This fucntion leaves
function ftp_downloadL ()
{
  _fn=$1
  executeR $MAX_ATTEMPT_COUNT "curl -s -u ${ftp_user}:${ftp_pswd} -O ftp://${obcsae_ip_addr}/${_fn}" 
  
 if [ $? -ne 0 ] ; then
  	exit_msg="EXIT: FTP file download ftp://${obcsae_ip_addr}/${_fn} has failed"
  	echo $exit_msg | tee -a $LOGFILE
  	exit $EXIT_FAIL_OBCSAE_FTP_TRANSFER
 fi

}
export -f ftp_downloadL

# This functiion will upload the local source file to folder on OBC-SAE
# Parameters:
# param 1 - file name with the full path
# param 2 - destination path and optionally a new name on OBC-SAE
# This function leaves
function ftp_uploadL ()
{
	_src=$1
	_dst=$2
	executeR $MAX_ATTEMPT_COUNT "curl -s -u ${ftp_user}:${ftp_pswd} -T ${_src} ftp://${obcsae_ip_addr}/${_dst}/"
	
	if [ $? -ne 0 ] ; then
  		exit_msg="EXIT: FTP file ${_src} upload to ftp://${obcsae_ip_addr}/${_dst}/ has failed"
  		echo $exit_msg | tee -a $LOGFILE
  		exit $EXIT_FAIL_OBCSAE_FTP_TRANSFER
	fi

}
export -f ftp_uploadL

# This function will delete a file on OBC-SAE
# Parameters:
# param 1 - file name with the full path on OBC-SAE
# This function leaves
function ftp_deleteL () 
{
	_fn=$1
	for (( a=0; a < $MAX_ATTEMPT_COUNT; a++ )) ; do 
		curl -s -u "${ftp_user}:${ftp_pswd}" --quote "DELE ${_fn}" ftp://${obcsae_ip_addr} > /dev/null
		if [ $? -eq 0 ] ; then
			break;
		fi
	done
	if [ $? -ne 0 ] ; then
  		exit_msg="EXIT: FTP file ${_fn} delete has failed"
  		echo $exit_msg | tee -a $LOGFILE
  		exit $EXIT_FAIL_OBCSAE_FTP_TRANSFER
	fi
}
export -f ftp_deleteL
